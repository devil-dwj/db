package main

import (
	"fmt"
	"strings"

	"github.com/iancoleman/strcase"
	"google.golang.org/protobuf/compiler/protogen"
)

const (
	dbPackage      = protogen.GoImportPath("github.com/devil-dwj/db")
	contextPackage = protogen.GoImportPath("context")
	errorsPackage  = protogen.GoImportPath("errors")
)

func generateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {

	filename := file.GeneratedFilenamePrefix + ".procedure.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-go-procedure. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()

	generateFileContent(gen, file, g)

	return g
}

func generateFileContent(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile) {
	if len(file.Messages) == 0 {
		return
	}

	origFileName := file.Proto.GetName()
	lend := strings.Split(origFileName, "/")
	trimName := strings.TrimSuffix(lend[len(lend)-1], "_pr.proto")
	goTypeName := strcase.ToCamel(trimName)
	goStructName := goTypeName + "Procedure"

	// interface
	g.P("type ", goStructName, " interface {")
	//g.P("GetRawDB() *", dbPackage.Ident("DB"))
	for _, message := range file.Messages {
		if !genable(string(message.Desc.Name())) {
			continue
		}

		g.P(interfaceSignature(gen, file, g, message))
	}
	g.P("}")
	g.P()

	// struct impl
	goStructImplName := goTypeName + "_Procedure"
	g.P("type ", goStructImplName, " struct {")
	g.P("db *", dbPackage.Ident("DB"))
	g.P("}")

	// new
	g.P("func New", goStructName, "(db *", dbPackage.Ident("DB"), ") ", goStructName, "{")
	g.P("return &", goStructImplName, "{db: db}")
	g.P("}")
	g.P()

	// GetRawDB
	// g.P("func ", getEnclosureIdent(goStructImplName), "GetRawDB() *", gormPackage.Ident("DB"), "{")
	// g.P("return r.db")
	// g.P("}")
	// g.P()

	// impl methods
	for _, message := range file.Messages {
		if !genable(string(message.Desc.Name())) {
			continue
		}

		implFuncSignature(gen, file, g, message, goStructImplName)
	}
}

func interfaceSignature(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, message *protogen.Message) string {
	var req = ""
	var rsp = ""
	var result = ""
	var total = ""
	var totalPage = ""
	var pageTotal = ""
	for _, field := range message.Fields {
		if field.GoName == "Req" && field.Message != nil {
			req = "*" + g.QualifiedGoIdent(field.Message.GoIdent)
		}
		if field.GoName == "Rsp" && field.Message != nil {
			if field.Desc.IsList() {
				rsp = "[]*" + g.QualifiedGoIdent(field.Message.GoIdent) + ", "
			} else {
				rsp = "*" + g.QualifiedGoIdent(field.Message.GoIdent) + ", "
			}
		}
		if field.GoName == "Result" {
			result = "int" + ", "
		}
		if field.GoName == "TotalCount" {
			total = "int, "
		}
		if field.GoName == "TotalPage" {
			totalPage = "int, "
		}
		if field.GoName == "PageTotal" {
			pageTotal = "int, "
		}
	}

	return message.GoIdent.GoName + "(" + g.QualifiedGoIdent(contextPackage.Ident("Context")) + ", " + req + ") (" + rsp + result + total + totalPage + pageTotal + "error)"
}

func implFuncSignature(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, message *protogen.Message, goStructImplName string) {

	var req = ""
	var rsp = ""
	var result = ""
	var total = ""
	var totalPage = ""
	var pageTotal = ""
	for _, field := range message.Fields {

		if field.GoName == "Req" && field.Message != nil {
			req = "req *" + g.QualifiedGoIdent(field.Message.GoIdent)
		}
		if field.GoName == "Rsp" && field.Message != nil {
			if field.Desc.IsList() {
				rsp = "[]*" + g.QualifiedGoIdent(field.Message.GoIdent) + ", "
			} else {
				rsp = "*" + g.QualifiedGoIdent(field.Message.GoIdent) + ", "
			}
		}
		if field.GoName == "Result" {
			result = "int" + ", "
		}
		if field.GoName == "TotalCount" {
			total = "int, "
		}
		if field.GoName == "TotalPage" {
			totalPage = "int, "
		}
		if field.GoName == "PageTotal" {
			pageTotal = "int, "
		}
	}

	g.P("func ", getEnclosureIdent(goStructImplName), message.GoIdent.GoName, "(ctx context.Context, ", req, ") (", rsp, result, total, totalPage, pageTotal, "error) {")
	// call prps
	callPrpsSignature(gen, file, g, message)
	g.P("}")
	g.P()
}

func callPrpsSignature(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, message *protogen.Message) {

	var (
		resIdentOne    = ""
		resIdentList   = ""
		resultIdent    = ""
		totalIdent     = ""
		totalPageIdent = ""
		pageTotalIdent = ""

		returnResOne    = ""
		returnRes       = ""
		returnResult    = ""
		returnTotal     = ""
		returnTotalPage = ""
		returnPageTotal = ""

		rspIsList = false
	)

	for _, field := range message.Fields {

		if field.GoName == "Rsp" && field.Message != nil {
			resIdentOne = fmt.Sprintf("resOne := &%s{}", g.QualifiedGoIdent(field.Message.GoIdent))
			resIdentList = fmt.Sprintf("res := []*%s{}", g.QualifiedGoIdent(field.Message.GoIdent))
			returnResOne = "resOne, "
			returnRes = "res, "
			if field.Desc.IsList() {
				rspIsList = true
			}
		}

		if field.GoName == "Result" {
			resultIdent = "result := 0"
			returnResult = "result, "
		}

		if field.GoName == "TotalCount" {
			totalIdent = "total := 0"
			returnTotal = "total, "
		}

		if field.GoName == "TotalPage" {
			totalPageIdent = "totalPage := 0"
			returnTotalPage = "totalPage, "
		}

		if field.GoName == "PageTotal" {
			pageTotalIdent = "pageTotal := 0"
			returnPageTotal = "pageTotal, "
		}
	}

	if !rspIsList {
		g.P(resIdentOne)
	}
	g.P(resIdentList)
	g.P(resultIdent)
	g.P(totalIdent)
	g.P(totalPageIdent)
	g.P(pageTotalIdent)

	g.P("tx := r.db.WithContext(ctx).Begin()")
	g.P("err := tx.")

	// iv field
	ivTempl := ""
	ivTotal := ""
	ivTotalPage := ""
	ivPageTotal := ""
	ivArg := ""
	ivComma := ""
	for _, field := range message.Fields {
		if field.GoName == "Req" {
			ivComma = ","
			fieldLen := len(field.Message.Fields)
			for i, field1 := range field.Message.Fields {
				ide := ", "
				if i == fieldLen-1 {
					ide = ""
				}

				ivTempl += ", ?"
				ivArg += fmt.Sprintf("req.%s%s",
					strcase.ToCamel(field1.GoName), ide)
			}
		}

		if field.GoName == "TotalCount" {
			ivTotal += ", @ov_total_count"
		}
		if field.GoName == "TotalPage" {
			ivTotalPage += ", @ov_total_page"
		}
		if field.GoName == "PageTotal" {
			ivPageTotal += ", @ov_page_total"
		}
	}

	if ivTempl != "" {
		// 有入参
		g.P(fmt.Sprintf(`Raw("call %s(@ov_return%s%s%s%s)"%s`,
			strcase.ToSnake(message.GoIdent.GoName), ivTempl, ivTotal, ivTotalPage, ivPageTotal, ivComma))
		g.P(fmt.Sprintf("%s).", ivArg))
		if resIdentList != "" {
			g.P("Scan(&res).")
		} else {
			if resultIdent == "" {
				g.P("result := -1")
			}
			g.P("Scan(&result).")
		}

		if resultIdent != "" {
			g.P(`Raw("select @ov_return").`)
			g.P("Scan(&result).")
		}
		if totalIdent != "" {
			g.P(`Raw("select @ov_total_count").`)
			g.P("Scan(&total).")
		}
		if totalPageIdent != "" {
			g.P(`Raw("select @ov_total_page").`)
			g.P("Scan(&totalPage).")
		}
		if pageTotalIdent != "" {
			g.P(`Raw("select @ov_page_total").`)
			g.P("Scan(&pageTotal).")
		}

	} else {
		// 无入参
		g.P(fmt.Sprintf(`Raw("call %s(@ov_return%s)").`,
			strcase.ToSnake(message.GoIdent.GoName), ivTotal))
		if resIdentList != "" {
			g.P("Scan(&res).")
		}
		if resultIdent != "" {
			g.P(`Raw("select @ov_return").`)
			g.P("Scan(&result).")
		}
		if totalIdent != "" {
			g.P(`Raw("select @ov_total_count").`)
			g.P("Scan(&total).")
		}
		if totalPageIdent != "" {
			g.P(`Raw("select @ov_total_page").`)
			g.P("Scan(&totalPage).")
		}
		if pageTotalIdent != "" {
			g.P(`Raw("select @ov_page_total").`)
			g.P("Scan(&pageTotal).")
		}
	}

	g.P("Error")
	g.P()

	g.P("if err != nil {")
	g.P("tx.Rollback()")
	g.P("} else {")
	g.P("err = tx.Commit().Error")
	g.P("}")
	g.P()

	if !rspIsList && returnRes != "" {
		g.P("if err != nil {")
		g.P(fmt.Sprintf("return %s%s%s%s%serr", returnResOne, returnResult, returnTotal, returnTotalPage, returnPageTotal))
		g.P("}")
		g.P("")
		g.P("if len(res) > 0 {")
		g.P("resOne = res[0]")
		g.P("} else {")
		// g.P("err = ", errorsPackage.Ident("New"), "(\"not find recored\")")
		g.P("err = ", dbPackage.Ident("ErrNotFindRecord"))
		g.P("}")
		g.P()

		g.P(fmt.Sprintf("return %s%s%s%s%serr", returnResOne, returnResult, returnTotal, returnTotalPage, returnPageTotal))

	} else {
		g.P(fmt.Sprintf("return %s%s%s%s%serr", returnRes, returnResult, returnTotal, returnTotalPage, returnPageTotal))
	}
}

func getEnclosureIdent(name string) string {
	return "(r *" + name + ")"
}

func genable(name string) bool {
	return strings.HasPrefix(name, "PrPs")
}
